<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zakariyyaSv&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-30T13:18:49.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zakariyyaSv</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>拆解ARC下的self</title>
    <link href="http://yoursite.com/2016/08/24/%E6%8B%86%E8%A7%A3ARC%E4%B8%8B%E7%9A%84self/"/>
    <id>http://yoursite.com/2016/08/24/拆解ARC下的self/</id>
    <published>2016-08-24T13:23:28.000Z</published>
    <updated>2016-08-30T13:18:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在研究AFNetworking源码的过程中碰到了很多处地方用到了<code>weakSelf</code>和<code>strongSelf</code>。依据自己之前的理解，正常情况下使用<code>weakSelf</code>是为了避免发生循环引用，而使用<code>strongSelf</code>是为了避免方法还没有执行完成self已经被释放从而导致崩溃。不过为何在方法执行完成之前无法确保self不被释放却不是很明白，于是乎，自己花了些时间研究了一下。</p>
<h3 id="self的本质"><a href="#self的本质" class="headerlink" title="self的本质"></a>self的本质</h3><p>self是类的隐藏参数，在类方法中self指向当前调用方法的类，在实例方法中指向当前调用方法的类的init方法族生成的实例。更准确来说，在类方法中self是const Class self，在实例方法中self是Person const* self（以Person类举例）。事实确实如此么？来验证一下。<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#import &quot;Person.h&quot;</div><div class="line"></div><div class="line">@implementation Person</div><div class="line"></div><div class="line">- (void)eat&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (void)classEat&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)drink:(NSString *)sth&#123;</div><div class="line">    [self eat];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>将Person.m用clang命令进行重写，得到的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">static void _I_Person_eat(Person * self, SEL _cmd) &#123;</div><div class="line">    id obj = ((Person *(*)(__rw_objc_super *, SEL))(void *)objc_msgSendSuper)((__rw_objc_super)&#123;(id)self, (id)class_getSuperclass(objc_getClass(&quot;Person&quot;))&#125;, sel_registerName(&quot;init&quot;));</div><div class="line">&#125;</div><div class="line"></div><div class="line">static void _C_Person_classEat(Class self, SEL _cmd) &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">static void _I_Person_drink_(Person * self, SEL _cmd, NSString *sth) &#123;</div><div class="line">    ((void (*)(id, SEL))(void *)objc_msgSend)((id)self, sel_registerName(&quot;eat&quot;));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从重写后的代码中可以看出结论是正确的，但还是没有找到self在方法执行过程中可能被释放的原因。我又查阅了<a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html#self" target="_blank" rel="external">Clang</a>的官方文档,找到了其中关于self的说明：</p>
<blockquote>
<p>The self parameter variable of an Objective-C method is never actually retained by the implementation. It is undefined behavior, or at least dangerous, to cause an object to be deallocated during a message send to that object.</p>
<p>To make this safe, for Objective-C instance methods self is implicitly const unless the method is in the init family. Further, self is always implicitly const within a class method.</p>
</blockquote>
<p>翻译过来就是在OC方法中作为参数的self不会被方法的实现持有，当给self指向的对象发送消息时确实可能会发生错误。为了确保安全，除非是在init及类init的方法中，否则在OC的实例方法和类方法中self始终是指针常量无法被retain。根据我的理解整理如下：</p>
<ol>
<li><p>在ARC中，self的修饰符是<strong>unsafe_unretained，而不是</strong>strong。<strong>unsafe_unretained与weak类似，均是对对象的弱引用，区别在于当</strong>unsafe_unretained的指针指向的对象被释放后，指针仍会指向被释放对象的内存地址，变成野指针导致crash，而当<strong>weak的指针指向的对象被释放后，指针指向的对象会被置为nil。正是由于</strong>unsafe_unretained修饰符的作用，因此会导致在方法执行的过程若self被释放则会引起crash。</p>
</li>
<li><p>OC方法不会对self自动retain（除了init方法族以外），self在方法运行过程中的生命周期需要由程序员自己手动实现来保证。通常的做法也就是在方法中添加一个局部变量strongSelf来对self指向的对象进行强引用来保证在方法执行完之前self都不会被释放。</p>
</li>
<li><p>对self采用__unsafe_unretained修饰符，主要是为了性能方面的考虑。通常调用一个方法被runtime改写成objc_msgSend()后，传入的第一个参数都是self，从上面clang重写的代码中也可以看出。若是在方法调用中对self进行retain和release，确实可以保证方法执行过程中self不会被释放，但是，会对性能产生很大影响。并且在大多数方法调用过程中，self是不会被释放的，因此，不对self进行reatain和release操作所带来的性能提升是值得的。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在研究AFNetworking源码的过程中碰到了很多处地方用到了&lt;code&gt;weakSelf&lt;/code&gt;和&lt;code&gt;strongSelf&lt;/code&gt;。依据自己之前的理解，正常情况下使用&lt;code&gt;weakSelf&lt;/code&gt;是为了避免发生循环引用，而使用&lt;code&gt;strongSelf&lt;/code&gt;是为了避免方法还没有执行完成self已经被释放从而导致崩溃。不过为何在方法执行完成之前无法确保self不被释放却不是很明白，于是乎，自己花了些时间研究了一下。&lt;/p&gt;
&lt;h3 id=&quot;self的本质&quot;&gt;&lt;a href=&quot;#self的本质&quot; class=&quot;headerlink&quot; title=&quot;self的本质&quot;&gt;&lt;/a&gt;self的本质&lt;/h3&gt;&lt;p&gt;self是类的隐藏参数，在类方法中self指向当前调用方法的类，在实例方法中指向当前调用方法的类的init方法族生成的实例。更准确来说，在类方法中self是const Class self，在实例方法中self是Person const* self（以Person类举例）。事实确实如此么？来验证一下。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>UIImage加载图片方式的研究</title>
    <link href="http://yoursite.com/2016/01/20/UIImage%E5%8A%A0%E8%BD%BD%E5%9B%BE%E7%89%87%E6%96%B9%E5%BC%8F%E7%9A%84%E7%A0%94%E7%A9%B6/"/>
    <id>http://yoursite.com/2016/01/20/UIImage加载图片方式的研究/</id>
    <published>2016-01-20T11:56:39.000Z</published>
    <updated>2016-08-30T13:19:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>常用的UIImage加载图片的方式有以下几种：</p>
<ul>
<li><code>[UIImage imageNamed:name]</code></li>
<li><code>[UIImage imageWithContentsOfFile:name]</code></li>
<li><code>[UIImage imageWithData:data]</code></li>
<li><code>[UIImage imageWithCGImage:imageRef]</code></li>
<li><code>[UIImage imageWithCIImage:obj]</code></li>
</ul>
<p>以上方法中<code>imageNamed:</code>和<code>imageWitData:</code>应用程序会对其自动缓存，不过，它们缓存的实现方式并不相同，后面会有详细说明。除去这两个方法以外剩下的三个方法默认情况下是不会产生缓存的，这三个方法的主要区别在于它们的数据源：<code>imageWithContentsOfFile:</code>从指定文件中创建对象，<code>imageWithCGImage:</code>以CGImageRef来创建对象，<code>imageWithCIImage:</code>以CIImage对象来创建对象。<br>最后两种方法平时用的相对会少一些，简要解释一下CGImage与CIImage的区别：CGImageRef只能代表位图，如果你需要与bitmap数据打交道，无疑CGImage是非常合适的选择。CGImageRef以CG开头就不难想到CGImageRef的相关操作都需要在Core Graphics中进行，比如混合、遮罩等等。CIImage以CI开头，即Core Image，不难理解CIImage是底层的数据对象，它通常包含了与它相关的图像数据，而不是一个图像。默认情况下，CIImage对象是不会被绘图系统渲染的，除非是得到明确的指令。这种机制（“lazy evaluation”）允许核心绘图系统尽可能高效地运行。CIImage通常被运用在GPU优化图像滤镜算法当中。<br><a id="more"></a></p>
<h3 id="UIImage缓存原理"><a href="#UIImage缓存原理" class="headerlink" title="UIImage缓存原理"></a>UIImage缓存原理</h3><p>1.<code>[UIImage imageNamed:name]</code><br>我通过查看<code>imageNamed</code>方法的调用栈以及查阅<a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIImage_Class/#//apple_ref/occ/clm/UIImage/imageNamed:" target="_blank" rel="external">苹果相关文档</a>后对UIImage的缓存实现有了清晰的认识。<br>当调用imageNamed方法时，该方法会去内存缓存里去查找与参数一致的image对象并且返回最合适大小的image对象，如果没有找到，该方法则会去本地磁盘中查找然后加载图片并返回image对象，同时将image对象缓存到系统缓存中，以便下次重复使用。更底层一点的解释，当返回image对象时，并未对image的图片数据进行解码。它的解码过程发生在UIImage对象第一次显示到屏幕上的时候，而image对象的缓存也发生在这时候。当解码完成image显示在屏幕上后，应用程序会将image的解码结果保存到缓存中。通常缓存会在收到内存警告时才会被清空。</p>
<p>2.<code>[UIImage imageWithData:data]</code><br>在查看imageWithData方法的调用栈时发现了有意思的东西。通过二进制数据创建image对象时，实际上在底层调用的是<code>ImageIO/ImageIO.h</code>的<code>CGImageSourceCreateWithData()</code>方法。该方法的第二个参数可以传入key为kCGImageSourceShouldCache的键值对，它的值是CFBooleanRef类型的，默认情况下，在64位机器上它的值为kCFBooleanTrue，而在32位机器上它的值为kCFBooleanFalse。也就是说在64位机器上是会缓存的，而在32位机器上则是不会缓存的。与<code>imageNamed</code>方法类似，图片会在第一次显示到屏幕上时才会进行解码，随后再被缓存到CGImage里面。依据是<code>CGImageSourceCreateWithData()</code>方法第二个参数可以传入key为kCGImageSourceShouldCacheImmediately的键值对，默认情况下它的值是kCFBooleanFalse。</p>
<h3 id="UIImage不缓存"><a href="#UIImage不缓存" class="headerlink" title="UIImage不缓存"></a>UIImage不缓存</h3><ul>
<li><code>[UIImage imageWithContentsOfFile:name]</code><br>与前面两个方法略有不同，该方法是同步的（synchronous）。当在主线程（UI）中调用该方法时，会阻塞主线程并从磁盘中加载图片数据，若磁盘数据较大会造成卡顿或者延迟。通常的解决方法是另开一个线程异步完成磁盘加载图片数据的任务，然后在主线程中刷新UI。下面代码给出了一个例子：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, 0), ^&#123;</div><div class="line"></div><div class="line">    UIImage *image = [UIImage imageWithContentsOfFile:imagePath];</div><div class="line"></div><div class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">        [self.button setBackgroundImage:image forState:UIControlStateNormal];</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>当图片显示在屏幕上时，系统并不会对其进行缓存。当图片数据被加载到内存中，它会被标记为可清除（purgeable）。如果数据被清除了且需要再次加载，image对象会再次从指定的文件路径获取数据并加载进内存中。根据它的实现原理，通常该方法的使用场景是图片不需要重复展示，或者图片的数据较大会造成内存警告。当然，这并不是说<code>imageWithContentsOfFile:</code>一定比<code>imageNamed:</code>方法高效，<code>imageWithContentsOfFile:</code>方法的问题在于它会将图片文件全尺寸展示在屏幕上即使是512*512的图片都要占到1M多的内存，加载会影响程序的性能，造成不好的用户体验。<br>针对图片尺寸太大带来的性能问题，比较好的解决方案是用<code>CGImageSource</code>的有关方法，将图片的尺寸缩减到适合的尺寸，减小数据大小。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#import &lt;ImageIO/ImageIO.h&gt;</div><div class="line"></div><div class="line">NSURL *imageFileURL = [NSURL fileURLWithPath:...];</div><div class="line">CGImageSourceRef imageSource = CGImageSourceCreateWithURL((CFURLRef)imageFileURL, NULL);</div><div class="line">if (imageSource == NULL) &#123;</div><div class="line">    // Error loading image</div><div class="line">    ...</div><div class="line">    return;</div><div class="line">&#125;</div><div class="line"></div><div class="line">NSDictionary *options = [NSDictionary dictionaryWithObjectsAndKeys:</div><div class="line">                         [NSNumber numberWithBool:NO], (NSString *)kCGImageSourceShouldCache,</div><div class="line">                         nil];</div><div class="line">CFDictionaryRef imageProperties = CGImageSourceCopyPropertiesAtIndex(imageSource, 0, (CFDictionaryRef)options);</div><div class="line">if (imageProperties) &#123;</div><div class="line">    NSNumber *width = (NSNumber *)CFDictionaryGetValue(imageProperties, kCGImagePropertyPixelWidth);</div><div class="line">    NSNumber *height = (NSNumber *)CFDictionaryGetValue(imageProperties, kCGImagePropertyPixelHeight);</div><div class="line">    NSLog(@&quot;Image dimensions: %@ x %@ px&quot;, width, height);</div><div class="line">    CFRelease(imageProperties);</div><div class="line">&#125;</div><div class="line">CFRelease(imageSource);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用的UIImage加载图片的方式有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[UIImage imageNamed:name]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[UIImage imageWithContentsOfFile:name]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[UIImage imageWithData:data]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[UIImage imageWithCGImage:imageRef]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[UIImage imageWithCIImage:obj]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上方法中&lt;code&gt;imageNamed:&lt;/code&gt;和&lt;code&gt;imageWitData:&lt;/code&gt;应用程序会对其自动缓存，不过，它们缓存的实现方式并不相同，后面会有详细说明。除去这两个方法以外剩下的三个方法默认情况下是不会产生缓存的，这三个方法的主要区别在于它们的数据源：&lt;code&gt;imageWithContentsOfFile:&lt;/code&gt;从指定文件中创建对象，&lt;code&gt;imageWithCGImage:&lt;/code&gt;以CGImageRef来创建对象，&lt;code&gt;imageWithCIImage:&lt;/code&gt;以CIImage对象来创建对象。&lt;br&gt;最后两种方法平时用的相对会少一些，简要解释一下CGImage与CIImage的区别：CGImageRef只能代表位图，如果你需要与bitmap数据打交道，无疑CGImage是非常合适的选择。CGImageRef以CG开头就不难想到CGImageRef的相关操作都需要在Core Graphics中进行，比如混合、遮罩等等。CIImage以CI开头，即Core Image，不难理解CIImage是底层的数据对象，它通常包含了与它相关的图像数据，而不是一个图像。默认情况下，CIImage对象是不会被绘图系统渲染的，除非是得到明确的指令。这种机制（“lazy evaluation”）允许核心绘图系统尽可能高效地运行。CIImage通常被运用在GPU优化图像滤镜算法当中。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>ApplePay线上支付教程</title>
    <link href="http://yoursite.com/2016/01/14/ApplePay%E7%BA%BF%E4%B8%8A%E6%94%AF%E4%BB%98%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2016/01/14/ApplePay线上支付教程/</id>
    <published>2016-01-14T12:33:39.000Z</published>
    <updated>2016-08-30T13:19:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一部分-准备阶段"><a href="#第一部分-准备阶段" class="headerlink" title="第一部分 准备阶段"></a>第一部分 准备阶段</h2><p>1）硬件要求：<br>iPhone6及更新的设备，还有iPad air2和iPad mini3之后的平板，以及apple watch。具体型号（截止2016年2月）：iPhone 6，iPhone 6 Plus，iPhone 6s， iPhone 6s Plus；iPad Air 2，iPad mini 3，iPad mini 4，iPad Pro；还有Apple Watch。</p>
<p>2）系统要求：<br>iPhone或iPad至少要升到iOS 9.2版，手表至少watch OS 2.1。</p>
<p>3）配置支付环境<br>1.进入苹果开发者中心，注册App ID。<br>App ID必须是explicit类型，否则无法使用ApplePay服务。<br><a id="more"></a><br><img src="/images/applePay/1.png" alt=""></p>
<p>2.勾选Apple Pay并点击continue，然后点击“submit”提交。<br><img src="/images/applePay/2.jpeg" alt=""></p>
<p>3.在App IDs中找到刚刚注册成功的App ID，点击edit，对Apple Pay进行配置。<br><img src="/images/applePay/3.png" alt=""></p>
<p>4.创建MerchantID。<br><img src="/images/applePay/4.png" alt=""></p>
<p>5.配置Apple Pay服务，勾选Merchant ID。<br><img src="/images/applePay/5.png" alt=""></p>
<p>6.App ID的apple pay选项变成enable表示配置成功。<br><img src="/images/applePay/6.png" alt=""></p>
<p>7.创建Xcode项目，填入刚注册的BundleID。<br><img src="/images/applePay/7.png" alt=""></p>
<p>8.在项目的target-&gt;Capabilities中，打开Apple Pay，并勾选Merchant ID。<br><img src="/images/applePay/8.png" alt=""></p>
<h2 id="第二部分-代码实现"><a href="#第二部分-代码实现" class="headerlink" title="第二部分 代码实现"></a>第二部分 代码实现</h2><p>项目地址：<a href="https://github.com/ZakariyyaSv/ApplePayDemo" target="_blank" rel="external">https://github.com/ZakariyyaSv/ApplePayDemo</a></p>
<h4 id="一、判断支付环境"><a href="#一、判断支付环境" class="headerlink" title="一、判断支付环境"></a>一、判断支付环境</h4><p>1.导入Passkit框架，加载view。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &lt;PassKit/PassKit.h&gt;</div></pre></td></tr></table></figure></p>
<p>2.判断当前设备是否支持Apple Pay以及wallet中是否有符合所支持网络的银行卡。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">// 1.判断当前设备是否支持ApplePay</div><div class="line">if ([PKPaymentAuthorizationViewController canMakePayments]) &#123;</div><div class="line">    // 2.判断是否添加了银行卡</div><div class="line">    if ([PKPaymentAuthorizationViewController canMakePaymentsUsingNetworks:@[PKPaymentNetworkChinaUnionPay]]) &#123;</div><div class="line">        // 3.1添加支付按钮，点击跳转去支付</div><div class="line">        PKPaymentButton *buyBtn = [PKPaymentButton buttonWithType:PKPaymentButtonTypeBuy style:PKPaymentButtonStyleBlack];</div><div class="line">        [buyBtn addTarget:self action:@selector(buyOnClick) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">        [self.payView addSubview:buyBtn];</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        // 3.2添加设置按钮，点击跳转去wallet绑定银行卡</div><div class="line">        PKPaymentButton *setupBtn = [PKPaymentButton buttonWithType:PKPaymentButtonTypeSetUp style:PKPaymentButtonStyleWhiteOutline];</div><div class="line">        [setupBtn addTarget:self action:@selector(jumpToWallet) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">        [self.payView addSubview:setupBtn];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">else &#123;</div><div class="line">    NSLog(@&quot;The device cannot support ApplePay!&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行效果如下图所示：<br><img src="/images/applePay/2_1.png" alt=""></p>
<p>3.若wallet中没有绑定所支持网络的银行卡，则点击按钮跳转到wallet中去绑定银行卡。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (void)jumpToWallet&#123;</div><div class="line">    PKPassLibrary *walletLibrary = [[PKPassLibrary alloc] init];</div><div class="line">    [walletLibrary openPaymentSetup];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="/images/applePay/2_2.png" alt=""></p>
<p>4.若该设备支持Apple Pay并且有绑定所支持网络的银行卡则发起支付请求。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">- (void)buyOnClick&#123;</div><div class="line">    NSLog(@&quot;start to pay!&quot;);</div><div class="line">    // 创建支付请求，配置请求信息。</div><div class="line">    PKPaymentRequest *payRequest = [[PKPaymentRequest alloc] init];</div><div class="line">    // 国家代码</div><div class="line">    payRequest.countryCode = @&quot;CN&quot;;</div><div class="line">    // 货币代码</div><div class="line">    payRequest.currencyCode = @&quot;CNY&quot;;</div><div class="line">    // 商家ID</div><div class="line">    payRequest.merchantIdentifier = @&quot;merchant.com.zakariyya.fabrunMerchant&quot;;</div><div class="line">    // 商家的处理方式</div><div class="line">    payRequest.merchantCapabilities = PKMerchantCapability3DS;</div><div class="line">    // 商家支持的网络</div><div class="line">    payRequest.supportedNetworks = @[PKPaymentNetworkChinaUnionPay];</div><div class="line">    </div><div class="line">    // 配置支付订单的详情</div><div class="line">    PKPaymentSummaryItem *cameraItem = [PKPaymentSummaryItem summaryItemWithLabel:@&quot;单反相机&quot; amount:[NSDecimalNumber decimalNumberWithString:@&quot;5999.0&quot;] type:PKPaymentSummaryItemTypeFinal];</div><div class="line">    PKPaymentSummaryItem *totalItem = [PKPaymentSummaryItem summaryItemWithLabel:@&quot;佳能&quot; amount:[NSDecimalNumber decimalNumberWithString:@&quot;5999.0&quot;] type:PKPaymentSummaryItemTypeFinal];</div><div class="line">    payRequest.paymentSummaryItems = @[cameraItem,totalItem];</div><div class="line">    </div><div class="line">    // 跳转并验证支付权限</div><div class="line">    PKPaymentAuthorizationViewController *authViewController = [[PKPaymentAuthorizationViewController alloc] initWithPaymentRequest:payRequest];</div><div class="line">    authViewController.delegate = self;</div><div class="line">    [self presentViewController:authViewController animated:YES completion:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>支付请求配置包括国家代码、货币代码、商家ID、商家的处理方式、商家支持的网络、订单的详情，这几个要素缺一不可。<br>其中，merchantCapabilities是一个枚举值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">typedef NS_OPTIONS(NSUInteger, PKMerchantCapability) &#123;</div><div class="line">    PKMerchantCapability3DS                                 = 1UL &lt;&lt; 0,   // Merchant supports 3DS</div><div class="line">    PKMerchantCapabilityEMV                                 = 1UL &lt;&lt; 1,   // Merchant supports EMV</div><div class="line">    PKMerchantCapabilityCredit NS_ENUM_AVAILABLE_IOS(9_0)   = 1UL &lt;&lt; 2,   // Merchant supports credit</div><div class="line">    PKMerchantCapabilityDebit  NS_ENUM_AVAILABLE_IOS(9_0)   = 1UL &lt;&lt; 3    // Merchant supports debit</div><div class="line">&#125; NS_ENUM_AVAILABLE(NA, 8_0);</div></pre></td></tr></table></figure></p>
<p>这些枚举值当中PKMerchantCapability3DS是必选项，其他的则是可选项。</p>
<p>supportedNetworks是一个包含常量字符串的数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">extern NSString * const PKPaymentNetworkAmex NS_AVAILABLE(NA, 8_0);</div><div class="line">extern NSString * const PKPaymentNetworkChinaUnionPay NS_AVAILABLE(NA, 9_2);</div><div class="line">extern NSString * const PKPaymentNetworkDiscover NS_AVAILABLE(NA, 9_0);</div><div class="line">extern NSString * const PKPaymentNetworkInterac NS_AVAILABLE(NA, 9_2);</div><div class="line">extern NSString * const PKPaymentNetworkMasterCard NS_AVAILABLE(NA, 8_0);</div><div class="line">extern NSString * const PKPaymentNetworkPrivateLabel NS_AVAILABLE(NA, 9_0);</div><div class="line">extern NSString * const PKPaymentNetworkVisa NS_AVAILABLE(NA, 8_0);</div></pre></td></tr></table></figure></p>
<p>国内一般我们用到的会是中国银联，即PKPaymentNetworkChinaUnionPay，注意：iOS 9.2以后才开始支持银联支付。</p>
<p><img src="/images/applePay/2_3.png" alt=""></p>
<p>5.监听用户授权状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#pragma mark - PKPaymentAuthorizationViewControllerDelegate</div><div class="line">// 用户授权成功后调用此方法</div><div class="line">- (void)paymentAuthorizationViewController:(PKPaymentAuthorizationViewController *)controller didAuthorizePayment:(PKPayment *)payment completion:(void (^)(PKPaymentAuthorizationStatus))completion&#123;</div><div class="line">    </div><div class="line">    // 一般在此处，拿到支付信息，发送给服务端处理，处理完毕后，服务器会返回一个状态来告诉客户端是否支付成功，然后由客户端进行处理。</div><div class="line">    BOOL isSuccess = YES;</div><div class="line">    </div><div class="line">    if (isSuccess) &#123;</div><div class="line">        completion(PKPaymentAuthorizationStatusSuccess);</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        completion(PKPaymentAuthorizationStatusFailure);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 用户授权成功或者用户取消授权操作时调用该方法</div><div class="line">- (void)paymentAuthorizationViewControllerDidFinish:(PKPaymentAuthorizationViewController *)controller&#123;</div><div class="line">    NSLog(@&quot;Authorization did finished!&quot;);</div><div class="line">    [self dismissViewControllerAnimated:YES completion:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h2><p><img src="/images/applePay/2_4.png" alt="ApplePay支付流程"></p>
<p><img src="/images/applePay/2_5.png" alt="第三方支付解决方案"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一部分-准备阶段&quot;&gt;&lt;a href=&quot;#第一部分-准备阶段&quot; class=&quot;headerlink&quot; title=&quot;第一部分 准备阶段&quot;&gt;&lt;/a&gt;第一部分 准备阶段&lt;/h2&gt;&lt;p&gt;1）硬件要求：&lt;br&gt;iPhone6及更新的设备，还有iPad air2和iPad mini3之后的平板，以及apple watch。具体型号（截止2016年2月）：iPhone 6，iPhone 6 Plus，iPhone 6s， iPhone 6s Plus；iPad Air 2，iPad mini 3，iPad mini 4，iPad Pro；还有Apple Watch。&lt;/p&gt;
&lt;p&gt;2）系统要求：&lt;br&gt;iPhone或iPad至少要升到iOS 9.2版，手表至少watch OS 2.1。&lt;/p&gt;
&lt;p&gt;3）配置支付环境&lt;br&gt;1.进入苹果开发者中心，注册App ID。&lt;br&gt;App ID必须是explicit类型，否则无法使用ApplePay服务。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
  </entry>
  
</feed>
